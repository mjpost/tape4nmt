global {
  SRC=zh
  TRG=en
  train_prefix=(TrainData:
    default="/exp/mpost/multi20/runs/zh-en/data/train"
    backtrans="/exp/mpost/multi20/runs/zh-en/data/train /export/common/data/corpora/bitext/zh-en/raw/wmt20backtrans/news.backtrans.en-zh"
  )
  dev_prefix="sacrebleu:wmt18"
  test_prefix="sacrebleu:wmt19"
}

global {
  ##################################################################################################
  # General options you should set for your environment
  ##################################################################################################

  # All ducttape files will be written underneath this directory
  ducttape_output="out"

  ##################################################################################################
  # Training options
  ##################################################################################################

  # early stopping
  train_patience=10

  # all default is consistent with nematus
  train_train_from="" # if there is a previous model to start with
  train_train_from_state_dict="" # if there is a previous dict to start with
  train_start_epoch="" # if trained for certain amount of epochs previously

  train_num_encoder_layers=6
  train_num_decoder_layers=6
  train_model_size=512
  train_ff_size=2048
  train_num_heads=8

#  train_batch_size="80"
  train_max_tokens="4000"
  train_update_interval=(UpdateFreq: 100 50 200 25 10 1)
  train_max_epoch=(MaxEpoch: 100 500)
  train_optim="adam"
  train_dropout=(Dropout: 0.1 0.3 0.5)
  # Increase for bigger batches (e.g., to 0.001 with --update-freq 16)
  train_lr="0.0005"
  train_lr_min="1e-09"
  train_lr_scheduler="inverse_sqrt"
  train_weight_decay="0.0"
  train_warmup_init_lr="1e-07"
  train_warmup_updates="4000"
  train_criterion="label_smoothed_cross_entropy"
  train_label_smoothing="0.1"
  train_clip_norm=(ClipNorm: 0.0 0.1 0.5 1 5)
  train_arch=(Architecture: transformer="transformer" conf="fconv" fconv_iwslt_de_en="fconv_iwslt_de_en" transformer_iwslt_de_en="transformer_iwslt_de_en")

  train_shared_vocab="false"

  # --share-decoder-input-output-embed or --share-all-embeddings
  train_shared_embeddings=" --share-decoder-input-output-embed"

  train_adam_betas="(0.9, 0.98)"

  # TEST CONFIGURATIONS
  test_model_selection_strategy="acc"
  test_max_sent_length="300"
  test_beam_size="12"
  test_batch_size="32"

  # EVALUATION
  sacrebleu_args="-tok intl"

  ##################################################################################################
  # Job parameters
  ##################################################################################################

  # SGE: generic job flags
  resource_flags="-l mem_free=2g,h_rt=12:00:00"

  # SGE: larger job flags
  resource_flags_16g="-l mem_free=16g,h_rt=12:00:00"

  # SGE: larger job flags
  resource_flags_16cpu="-l mem_free=16g,num_proc=16,h_rt=12:00:00"

  # SGE: flags for training a model
  resource_flags_train="-q gpu.q@@rtx -l gpu=2,mem_free=4g,h_rt=168:00:00"

  # SGE: flags for decoding
  resource_flags_decode="-q gpu.q -l gpu=1,mem_free=4g,h_rt=4:00:00"

  # SGE: flags for notifying about job completion (put in your email address!)
  action_flags="-m a -M post@cs.jhu.edu"
  action_flags_success="-m ae -M post@cs.jhu.edu"

  # The default submitter: shell (run locally) or sge (run on a grid)
  submitter=sge

  # Virtual env location. This should be a file path to the virtual env you want loaded before tasks.
  # This variable supports both conda and Python's virtualenv. For conda, use "conda:ENV" as the value,
  # where "ENV" is the name of the conda environment that should be loaded. For virtualenv, supply
  # the path to the script that should be loaded.
  pyenv="conda:fairseq"

  ##################################################################################################
  # Preprocessing options
  ##################################################################################################

  # protected patterns for tokenizer ("" for default)
  tokenize_protect=""
  tokenizer=default

  # sentencepiece options
  subword_joint_model=(SubwordShared: yes no)
  subword_coverage_src=0.995
  subword_coverage_trg=0.995
  sentencepiece_model_type="unigram"
  sentencepiece_alpha=0.5

  # subword args
  subword_vocab_size="5000"

  # options for cleaning training data
  train_maxlen=100
  train_clean_ratio=1
  data_maxlines=-1
  seed=44

  # MASKING
  masking_add_index=no
  masking_pattern_files="/home/hltcoe/mpost/code/tape4nmt/patterns.txt"
  masking_dict_files="/dev/null"
  masking_prob=1.0

  use_cpu=no
}

plan transformer {
  reach sacrebleu, package_model via
    (SubwordMethod: sentencepiece) * (Tokenizer: none cjk)
}
